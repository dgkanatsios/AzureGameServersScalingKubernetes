/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/dgkanatsios/azuregameserversscalingkubernetes/pkg/apis/azuregaming/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PortRegistryLister helps list PortRegistries.
type PortRegistryLister interface {
	// List lists all PortRegistries in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PortRegistry, err error)
	// PortRegistries returns an object that can list and get PortRegistries.
	PortRegistries(namespace string) PortRegistryNamespaceLister
	PortRegistryListerExpansion
}

// portRegistryLister implements the PortRegistryLister interface.
type portRegistryLister struct {
	indexer cache.Indexer
}

// NewPortRegistryLister returns a new PortRegistryLister.
func NewPortRegistryLister(indexer cache.Indexer) PortRegistryLister {
	return &portRegistryLister{indexer: indexer}
}

// List lists all PortRegistries in the indexer.
func (s *portRegistryLister) List(selector labels.Selector) (ret []*v1alpha1.PortRegistry, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PortRegistry))
	})
	return ret, err
}

// PortRegistries returns an object that can list and get PortRegistries.
func (s *portRegistryLister) PortRegistries(namespace string) PortRegistryNamespaceLister {
	return portRegistryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PortRegistryNamespaceLister helps list and get PortRegistries.
type PortRegistryNamespaceLister interface {
	// List lists all PortRegistries in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PortRegistry, err error)
	// Get retrieves the PortRegistry from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PortRegistry, error)
	PortRegistryNamespaceListerExpansion
}

// portRegistryNamespaceLister implements the PortRegistryNamespaceLister
// interface.
type portRegistryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PortRegistries in the indexer for a given namespace.
func (s portRegistryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PortRegistry, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PortRegistry))
	})
	return ret, err
}

// Get retrieves the PortRegistry from the indexer for a given namespace and name.
func (s portRegistryNamespaceLister) Get(name string) (*v1alpha1.PortRegistry, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("portregistry"), name)
	}
	return obj.(*v1alpha1.PortRegistry), nil
}
